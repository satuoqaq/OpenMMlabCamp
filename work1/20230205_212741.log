2023-02-05 21:27:43,163 - mmcls - INFO - Environment info:
------------------------------------------------------------
sys.platform: win32
Python: 3.7.15 (default, Nov  9 2022, 10:44:37) [MSC v.1916 64 bit (AMD64)]
CUDA available: True
GPU 0: NVIDIA GeForce RTX 3060
CUDA_HOME: C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v11.0
NVCC: Cuda compilation tools, release 11.0, V11.0.221
GCC: n/a
PyTorch: 1.10.1
PyTorch compiling details: PyTorch built with:
  - C++ Version: 199711
  - MSVC 192829337
  - Intel(R) Math Kernel Library Version 2020.0.2 Product Build 20200624 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.2.3 (Git Hash 7336ca9f055cf1bfa13efb658fe15dc9b41f0740)
  - OpenMP 2019
  - LAPACK is enabled (usually provided by MKL)
  - CPU capability usage: AVX2
  - CUDA Runtime 11.3
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_37,code=compute_37
  - CuDNN 8.2
  - Magma 2.5.4
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.3, CUDNN_VERSION=8.2.0, CXX_COMPILER=C:/cb/pytorch_1000000000000/work/tmp_bin/sccache-cl.exe, CXX_FLAGS=/DWIN32 /D_WINDOWS /GR /EHsc /w /bigobj -DUSE_PTHREADPOOL -openmp:experimental -IC:/cb/pytorch_1000000000000/work/mkl/include -DNDEBUG -DUSE_KINETO -DLIBKINETO_NOCUPTI -DUSE_FBGEMM -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.10.1, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=OFF, USE_NNPACK=OFF, USE_OPENMP=ON, 

TorchVision: 0.11.2
OpenCV: 4.6.0
MMCV: 1.5.0
MMCV Compiler: MSVC 192930140
MMCV CUDA Compiler: 11.3
MMClassification: 0.25.0+
------------------------------------------------------------

2023-02-05 21:27:43,163 - mmcls - INFO - Distributed training: False
2023-02-05 21:27:43,219 - mmcls - INFO - Config:
model = dict(
    type='ImageClassifier',
    backbone=dict(type='ShuffleNetV2', widen_factor=1.0),
    neck=dict(type='GlobalAveragePooling'),
    head=dict(
        type='LinearClsHead',
        num_classes=5,
        in_channels=1024,
        loss=dict(type='CrossEntropyLoss', loss_weight=1.0),
        topk=(1, 5)))
dataset_type = 'ImageNet'
img_norm_cfg = dict(
    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)
train_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(type='RandomResizedCrop', size=224, backend='pillow'),
    dict(type='RandomFlip', flip_prob=0.5, direction='horizontal'),
    dict(
        type='Normalize',
        mean=[123.675, 116.28, 103.53],
        std=[58.395, 57.12, 57.375],
        to_rgb=True),
    dict(type='ImageToTensor', keys=['img']),
    dict(type='ToTensor', keys=['gt_label']),
    dict(type='Collect', keys=['img', 'gt_label'])
]
test_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(type='Resize', size=(256, -1), backend='pillow'),
    dict(type='CenterCrop', crop_size=224),
    dict(
        type='Normalize',
        mean=[123.675, 116.28, 103.53],
        std=[58.395, 57.12, 57.375],
        to_rgb=True),
    dict(type='ImageToTensor', keys=['img']),
    dict(type='Collect', keys=['img'])
]
data = dict(
    samples_per_gpu=32,
    workers_per_gpu=2,
    train=dict(
        type='ImageNet',
        data_prefix='../../data/flower/train',
        ann_file='../../data/flower/train.txt',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(type='RandomResizedCrop', size=224, backend='pillow'),
            dict(type='RandomFlip', flip_prob=0.5, direction='horizontal'),
            dict(
                type='Normalize',
                mean=[123.675, 116.28, 103.53],
                std=[58.395, 57.12, 57.375],
                to_rgb=True),
            dict(type='ImageToTensor', keys=['img']),
            dict(type='ToTensor', keys=['gt_label']),
            dict(type='Collect', keys=['img', 'gt_label'])
        ]),
    val=dict(
        type='ImageNet',
        data_prefix='../../data/flower/val',
        ann_file='../../data/flower/val.txt',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(type='Resize', size=(256, -1), backend='pillow'),
            dict(type='CenterCrop', crop_size=224),
            dict(
                type='Normalize',
                mean=[123.675, 116.28, 103.53],
                std=[58.395, 57.12, 57.375],
                to_rgb=True),
            dict(type='ImageToTensor', keys=['img']),
            dict(type='Collect', keys=['img'])
        ]),
    test=dict(
        type='ImageNet',
        data_prefix='data/imagenet/val',
        ann_file='data/imagenet/meta/val.txt',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(type='Resize', size=(256, -1), backend='pillow'),
            dict(type='CenterCrop', crop_size=224),
            dict(
                type='Normalize',
                mean=[123.675, 116.28, 103.53],
                std=[58.395, 57.12, 57.375],
                to_rgb=True),
            dict(type='ImageToTensor', keys=['img']),
            dict(type='Collect', keys=['img'])
        ]))
evaluation = dict(interval=1, metric='accuracy')
optimizer = dict(type='SGD', lr=0.001, momentum=0.9, weight_decay=0.0001)
optimizer_config = dict(grad_clip=None)
lr_config = dict(policy='step', step=[75, 90])
runner = dict(type='EpochBasedRunner', max_epochs=100)
checkpoint_config = dict(interval=20)
log_config = dict(
    interval=100,
    hooks=[dict(type='TextLoggerHook'),
           dict(type='TensorboardLoggerHook')])
dist_params = dict(backend='nccl')
log_level = 'INFO'
load_from = 'C:\PycharmProjects\mmclassification\checkpoints\shufflenet_v2_batch1024_imagenet_20200812-5bf4721e.pth'
resume_from = None
workflow = [('train', 1)]
work_dir = './work_dirs\shufflenet-v2-flower'
gpu_ids = [0]

2023-02-05 21:27:43,220 - mmcls - INFO - Set random seed to 40444503, deterministic: False
2023-02-05 21:27:43,248 - mmcls - INFO - initialize LinearClsHead with init_cfg {'type': 'Normal', 'layer': 'Linear', 'std': 0.01}
Name of parameter - Initialization information

backbone.conv1.conv.weight - torch.Size([24, 3, 3, 3]): 
Initialized by user-defined `init_weights` in ShuffleNetV2  

backbone.conv1.bn.weight - torch.Size([24]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.conv1.bn.bias - torch.Size([24]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.0.0.branch1.0.conv.weight - torch.Size([24, 1, 3, 3]): 
Initialized by user-defined `init_weights` in ShuffleNetV2  

backbone.layers.0.0.branch1.0.bn.weight - torch.Size([24]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.0.0.branch1.0.bn.bias - torch.Size([24]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.0.0.branch1.1.conv.weight - torch.Size([58, 24, 1, 1]): 
Initialized by user-defined `init_weights` in ShuffleNetV2  

backbone.layers.0.0.branch1.1.bn.weight - torch.Size([58]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.0.0.branch1.1.bn.bias - torch.Size([58]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.0.0.branch2.0.conv.weight - torch.Size([58, 24, 1, 1]): 
Initialized by user-defined `init_weights` in ShuffleNetV2  

backbone.layers.0.0.branch2.0.bn.weight - torch.Size([58]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.0.0.branch2.0.bn.bias - torch.Size([58]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.0.0.branch2.1.conv.weight - torch.Size([58, 1, 3, 3]): 
Initialized by user-defined `init_weights` in ShuffleNetV2  

backbone.layers.0.0.branch2.1.bn.weight - torch.Size([58]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.0.0.branch2.1.bn.bias - torch.Size([58]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.0.0.branch2.2.conv.weight - torch.Size([58, 58, 1, 1]): 
Initialized by user-defined `init_weights` in ShuffleNetV2  

backbone.layers.0.0.branch2.2.bn.weight - torch.Size([58]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.0.0.branch2.2.bn.bias - torch.Size([58]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.0.1.branch2.0.conv.weight - torch.Size([58, 58, 1, 1]): 
Initialized by user-defined `init_weights` in ShuffleNetV2  

backbone.layers.0.1.branch2.0.bn.weight - torch.Size([58]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.0.1.branch2.0.bn.bias - torch.Size([58]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.0.1.branch2.1.conv.weight - torch.Size([58, 1, 3, 3]): 
Initialized by user-defined `init_weights` in ShuffleNetV2  

backbone.layers.0.1.branch2.1.bn.weight - torch.Size([58]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.0.1.branch2.1.bn.bias - torch.Size([58]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.0.1.branch2.2.conv.weight - torch.Size([58, 58, 1, 1]): 
Initialized by user-defined `init_weights` in ShuffleNetV2  

backbone.layers.0.1.branch2.2.bn.weight - torch.Size([58]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.0.1.branch2.2.bn.bias - torch.Size([58]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.0.2.branch2.0.conv.weight - torch.Size([58, 58, 1, 1]): 
Initialized by user-defined `init_weights` in ShuffleNetV2  

backbone.layers.0.2.branch2.0.bn.weight - torch.Size([58]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.0.2.branch2.0.bn.bias - torch.Size([58]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.0.2.branch2.1.conv.weight - torch.Size([58, 1, 3, 3]): 
Initialized by user-defined `init_weights` in ShuffleNetV2  

backbone.layers.0.2.branch2.1.bn.weight - torch.Size([58]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.0.2.branch2.1.bn.bias - torch.Size([58]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.0.2.branch2.2.conv.weight - torch.Size([58, 58, 1, 1]): 
Initialized by user-defined `init_weights` in ShuffleNetV2  

backbone.layers.0.2.branch2.2.bn.weight - torch.Size([58]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.0.2.branch2.2.bn.bias - torch.Size([58]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.0.3.branch2.0.conv.weight - torch.Size([58, 58, 1, 1]): 
Initialized by user-defined `init_weights` in ShuffleNetV2  

backbone.layers.0.3.branch2.0.bn.weight - torch.Size([58]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.0.3.branch2.0.bn.bias - torch.Size([58]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.0.3.branch2.1.conv.weight - torch.Size([58, 1, 3, 3]): 
Initialized by user-defined `init_weights` in ShuffleNetV2  

backbone.layers.0.3.branch2.1.bn.weight - torch.Size([58]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.0.3.branch2.1.bn.bias - torch.Size([58]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.0.3.branch2.2.conv.weight - torch.Size([58, 58, 1, 1]): 
Initialized by user-defined `init_weights` in ShuffleNetV2  

backbone.layers.0.3.branch2.2.bn.weight - torch.Size([58]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.0.3.branch2.2.bn.bias - torch.Size([58]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.1.0.branch1.0.conv.weight - torch.Size([116, 1, 3, 3]): 
Initialized by user-defined `init_weights` in ShuffleNetV2  

backbone.layers.1.0.branch1.0.bn.weight - torch.Size([116]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.1.0.branch1.0.bn.bias - torch.Size([116]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.1.0.branch1.1.conv.weight - torch.Size([116, 116, 1, 1]): 
Initialized by user-defined `init_weights` in ShuffleNetV2  

backbone.layers.1.0.branch1.1.bn.weight - torch.Size([116]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.1.0.branch1.1.bn.bias - torch.Size([116]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.1.0.branch2.0.conv.weight - torch.Size([116, 116, 1, 1]): 
Initialized by user-defined `init_weights` in ShuffleNetV2  

backbone.layers.1.0.branch2.0.bn.weight - torch.Size([116]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.1.0.branch2.0.bn.bias - torch.Size([116]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.1.0.branch2.1.conv.weight - torch.Size([116, 1, 3, 3]): 
Initialized by user-defined `init_weights` in ShuffleNetV2  

backbone.layers.1.0.branch2.1.bn.weight - torch.Size([116]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.1.0.branch2.1.bn.bias - torch.Size([116]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.1.0.branch2.2.conv.weight - torch.Size([116, 116, 1, 1]): 
Initialized by user-defined `init_weights` in ShuffleNetV2  

backbone.layers.1.0.branch2.2.bn.weight - torch.Size([116]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.1.0.branch2.2.bn.bias - torch.Size([116]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.1.1.branch2.0.conv.weight - torch.Size([116, 116, 1, 1]): 
Initialized by user-defined `init_weights` in ShuffleNetV2  

backbone.layers.1.1.branch2.0.bn.weight - torch.Size([116]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.1.1.branch2.0.bn.bias - torch.Size([116]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.1.1.branch2.1.conv.weight - torch.Size([116, 1, 3, 3]): 
Initialized by user-defined `init_weights` in ShuffleNetV2  

backbone.layers.1.1.branch2.1.bn.weight - torch.Size([116]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.1.1.branch2.1.bn.bias - torch.Size([116]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.1.1.branch2.2.conv.weight - torch.Size([116, 116, 1, 1]): 
Initialized by user-defined `init_weights` in ShuffleNetV2  

backbone.layers.1.1.branch2.2.bn.weight - torch.Size([116]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.1.1.branch2.2.bn.bias - torch.Size([116]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.1.2.branch2.0.conv.weight - torch.Size([116, 116, 1, 1]): 
Initialized by user-defined `init_weights` in ShuffleNetV2  

backbone.layers.1.2.branch2.0.bn.weight - torch.Size([116]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.1.2.branch2.0.bn.bias - torch.Size([116]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.1.2.branch2.1.conv.weight - torch.Size([116, 1, 3, 3]): 
Initialized by user-defined `init_weights` in ShuffleNetV2  

backbone.layers.1.2.branch2.1.bn.weight - torch.Size([116]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.1.2.branch2.1.bn.bias - torch.Size([116]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.1.2.branch2.2.conv.weight - torch.Size([116, 116, 1, 1]): 
Initialized by user-defined `init_weights` in ShuffleNetV2  

backbone.layers.1.2.branch2.2.bn.weight - torch.Size([116]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.1.2.branch2.2.bn.bias - torch.Size([116]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.1.3.branch2.0.conv.weight - torch.Size([116, 116, 1, 1]): 
Initialized by user-defined `init_weights` in ShuffleNetV2  

backbone.layers.1.3.branch2.0.bn.weight - torch.Size([116]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.1.3.branch2.0.bn.bias - torch.Size([116]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.1.3.branch2.1.conv.weight - torch.Size([116, 1, 3, 3]): 
Initialized by user-defined `init_weights` in ShuffleNetV2  

backbone.layers.1.3.branch2.1.bn.weight - torch.Size([116]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.1.3.branch2.1.bn.bias - torch.Size([116]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.1.3.branch2.2.conv.weight - torch.Size([116, 116, 1, 1]): 
Initialized by user-defined `init_weights` in ShuffleNetV2  

backbone.layers.1.3.branch2.2.bn.weight - torch.Size([116]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.1.3.branch2.2.bn.bias - torch.Size([116]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.1.4.branch2.0.conv.weight - torch.Size([116, 116, 1, 1]): 
Initialized by user-defined `init_weights` in ShuffleNetV2  

backbone.layers.1.4.branch2.0.bn.weight - torch.Size([116]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.1.4.branch2.0.bn.bias - torch.Size([116]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.1.4.branch2.1.conv.weight - torch.Size([116, 1, 3, 3]): 
Initialized by user-defined `init_weights` in ShuffleNetV2  

backbone.layers.1.4.branch2.1.bn.weight - torch.Size([116]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.1.4.branch2.1.bn.bias - torch.Size([116]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.1.4.branch2.2.conv.weight - torch.Size([116, 116, 1, 1]): 
Initialized by user-defined `init_weights` in ShuffleNetV2  

backbone.layers.1.4.branch2.2.bn.weight - torch.Size([116]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.1.4.branch2.2.bn.bias - torch.Size([116]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.1.5.branch2.0.conv.weight - torch.Size([116, 116, 1, 1]): 
Initialized by user-defined `init_weights` in ShuffleNetV2  

backbone.layers.1.5.branch2.0.bn.weight - torch.Size([116]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.1.5.branch2.0.bn.bias - torch.Size([116]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.1.5.branch2.1.conv.weight - torch.Size([116, 1, 3, 3]): 
Initialized by user-defined `init_weights` in ShuffleNetV2  

backbone.layers.1.5.branch2.1.bn.weight - torch.Size([116]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.1.5.branch2.1.bn.bias - torch.Size([116]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.1.5.branch2.2.conv.weight - torch.Size([116, 116, 1, 1]): 
Initialized by user-defined `init_weights` in ShuffleNetV2  

backbone.layers.1.5.branch2.2.bn.weight - torch.Size([116]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.1.5.branch2.2.bn.bias - torch.Size([116]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.1.6.branch2.0.conv.weight - torch.Size([116, 116, 1, 1]): 
Initialized by user-defined `init_weights` in ShuffleNetV2  

backbone.layers.1.6.branch2.0.bn.weight - torch.Size([116]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.1.6.branch2.0.bn.bias - torch.Size([116]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.1.6.branch2.1.conv.weight - torch.Size([116, 1, 3, 3]): 
Initialized by user-defined `init_weights` in ShuffleNetV2  

backbone.layers.1.6.branch2.1.bn.weight - torch.Size([116]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.1.6.branch2.1.bn.bias - torch.Size([116]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.1.6.branch2.2.conv.weight - torch.Size([116, 116, 1, 1]): 
Initialized by user-defined `init_weights` in ShuffleNetV2  

backbone.layers.1.6.branch2.2.bn.weight - torch.Size([116]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.1.6.branch2.2.bn.bias - torch.Size([116]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.1.7.branch2.0.conv.weight - torch.Size([116, 116, 1, 1]): 
Initialized by user-defined `init_weights` in ShuffleNetV2  

backbone.layers.1.7.branch2.0.bn.weight - torch.Size([116]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.1.7.branch2.0.bn.bias - torch.Size([116]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.1.7.branch2.1.conv.weight - torch.Size([116, 1, 3, 3]): 
Initialized by user-defined `init_weights` in ShuffleNetV2  

backbone.layers.1.7.branch2.1.bn.weight - torch.Size([116]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.1.7.branch2.1.bn.bias - torch.Size([116]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.1.7.branch2.2.conv.weight - torch.Size([116, 116, 1, 1]): 
Initialized by user-defined `init_weights` in ShuffleNetV2  

backbone.layers.1.7.branch2.2.bn.weight - torch.Size([116]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.1.7.branch2.2.bn.bias - torch.Size([116]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.2.0.branch1.0.conv.weight - torch.Size([232, 1, 3, 3]): 
Initialized by user-defined `init_weights` in ShuffleNetV2  

backbone.layers.2.0.branch1.0.bn.weight - torch.Size([232]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.2.0.branch1.0.bn.bias - torch.Size([232]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.2.0.branch1.1.conv.weight - torch.Size([232, 232, 1, 1]): 
Initialized by user-defined `init_weights` in ShuffleNetV2  

backbone.layers.2.0.branch1.1.bn.weight - torch.Size([232]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.2.0.branch1.1.bn.bias - torch.Size([232]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.2.0.branch2.0.conv.weight - torch.Size([232, 232, 1, 1]): 
Initialized by user-defined `init_weights` in ShuffleNetV2  

backbone.layers.2.0.branch2.0.bn.weight - torch.Size([232]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.2.0.branch2.0.bn.bias - torch.Size([232]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.2.0.branch2.1.conv.weight - torch.Size([232, 1, 3, 3]): 
Initialized by user-defined `init_weights` in ShuffleNetV2  

backbone.layers.2.0.branch2.1.bn.weight - torch.Size([232]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.2.0.branch2.1.bn.bias - torch.Size([232]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.2.0.branch2.2.conv.weight - torch.Size([232, 232, 1, 1]): 
Initialized by user-defined `init_weights` in ShuffleNetV2  

backbone.layers.2.0.branch2.2.bn.weight - torch.Size([232]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.2.0.branch2.2.bn.bias - torch.Size([232]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.2.1.branch2.0.conv.weight - torch.Size([232, 232, 1, 1]): 
Initialized by user-defined `init_weights` in ShuffleNetV2  

backbone.layers.2.1.branch2.0.bn.weight - torch.Size([232]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.2.1.branch2.0.bn.bias - torch.Size([232]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.2.1.branch2.1.conv.weight - torch.Size([232, 1, 3, 3]): 
Initialized by user-defined `init_weights` in ShuffleNetV2  

backbone.layers.2.1.branch2.1.bn.weight - torch.Size([232]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.2.1.branch2.1.bn.bias - torch.Size([232]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.2.1.branch2.2.conv.weight - torch.Size([232, 232, 1, 1]): 
Initialized by user-defined `init_weights` in ShuffleNetV2  

backbone.layers.2.1.branch2.2.bn.weight - torch.Size([232]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.2.1.branch2.2.bn.bias - torch.Size([232]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.2.2.branch2.0.conv.weight - torch.Size([232, 232, 1, 1]): 
Initialized by user-defined `init_weights` in ShuffleNetV2  

backbone.layers.2.2.branch2.0.bn.weight - torch.Size([232]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.2.2.branch2.0.bn.bias - torch.Size([232]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.2.2.branch2.1.conv.weight - torch.Size([232, 1, 3, 3]): 
Initialized by user-defined `init_weights` in ShuffleNetV2  

backbone.layers.2.2.branch2.1.bn.weight - torch.Size([232]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.2.2.branch2.1.bn.bias - torch.Size([232]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.2.2.branch2.2.conv.weight - torch.Size([232, 232, 1, 1]): 
Initialized by user-defined `init_weights` in ShuffleNetV2  

backbone.layers.2.2.branch2.2.bn.weight - torch.Size([232]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.2.2.branch2.2.bn.bias - torch.Size([232]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.2.3.branch2.0.conv.weight - torch.Size([232, 232, 1, 1]): 
Initialized by user-defined `init_weights` in ShuffleNetV2  

backbone.layers.2.3.branch2.0.bn.weight - torch.Size([232]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.2.3.branch2.0.bn.bias - torch.Size([232]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.2.3.branch2.1.conv.weight - torch.Size([232, 1, 3, 3]): 
Initialized by user-defined `init_weights` in ShuffleNetV2  

backbone.layers.2.3.branch2.1.bn.weight - torch.Size([232]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.2.3.branch2.1.bn.bias - torch.Size([232]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.2.3.branch2.2.conv.weight - torch.Size([232, 232, 1, 1]): 
Initialized by user-defined `init_weights` in ShuffleNetV2  

backbone.layers.2.3.branch2.2.bn.weight - torch.Size([232]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.2.3.branch2.2.bn.bias - torch.Size([232]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.3.conv.weight - torch.Size([1024, 464, 1, 1]): 
Initialized by user-defined `init_weights` in ShuffleNetV2  

backbone.layers.3.bn.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.3.bn.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

head.fc.weight - torch.Size([5, 1024]): 
NormalInit: mean=0, std=0.01, bias=0 

head.fc.bias - torch.Size([5]): 
NormalInit: mean=0, std=0.01, bias=0 
2023-02-05 21:27:43,454 - mmcls - INFO - load checkpoint from local path: C:\PycharmProjects\mmclassification\checkpoints\shufflenet_v2_batch1024_imagenet_20200812-5bf4721e.pth
2023-02-05 21:27:43,479 - mmcls - WARNING - The model and loaded state dict do not match exactly

size mismatch for head.fc.weight: copying a param with shape torch.Size([1000, 1024]) from checkpoint, the shape in current model is torch.Size([5, 1024]).
size mismatch for head.fc.bias: copying a param with shape torch.Size([1000]) from checkpoint, the shape in current model is torch.Size([5]).
2023-02-05 21:27:43,480 - mmcls - INFO - Start running, host: FZY@DESKTOP-LBTNRA5, work_dir: C:\PycharmProjects\mmclassification\tools\work_dirs\shufflenet-v2-flower
2023-02-05 21:27:43,480 - mmcls - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) StepLrUpdaterHook                  
(NORMAL      ) CheckpointHook                     
(LOW         ) EvalHook                           
(VERY_LOW    ) TextLoggerHook                     
(VERY_LOW    ) TensorboardLoggerHook              
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) StepLrUpdaterHook                  
(LOW         ) IterTimerHook                      
(LOW         ) EvalHook                           
(VERY_LOW    ) TextLoggerHook                     
(VERY_LOW    ) TensorboardLoggerHook              
 -------------------- 
before_train_iter:
(VERY_HIGH   ) StepLrUpdaterHook                  
(LOW         ) IterTimerHook                      
(LOW         ) EvalHook                           
 -------------------- 
after_train_iter:
(ABOVE_NORMAL) OptimizerHook                      
(NORMAL      ) CheckpointHook                     
(LOW         ) IterTimerHook                      
(LOW         ) EvalHook                           
(VERY_LOW    ) TextLoggerHook                     
(VERY_LOW    ) TensorboardLoggerHook              
 -------------------- 
after_train_epoch:
(NORMAL      ) CheckpointHook                     
(LOW         ) EvalHook                           
(VERY_LOW    ) TextLoggerHook                     
(VERY_LOW    ) TensorboardLoggerHook              
 -------------------- 
before_val_epoch:
(LOW         ) IterTimerHook                      
(VERY_LOW    ) TextLoggerHook                     
(VERY_LOW    ) TensorboardLoggerHook              
 -------------------- 
before_val_iter:
(LOW         ) IterTimerHook                      
 -------------------- 
after_val_iter:
(LOW         ) IterTimerHook                      
 -------------------- 
after_val_epoch:
(VERY_LOW    ) TextLoggerHook                     
(VERY_LOW    ) TensorboardLoggerHook              
 -------------------- 
after_run:
(VERY_LOW    ) TextLoggerHook                     
(VERY_LOW    ) TensorboardLoggerHook              
 -------------------- 
2023-02-05 21:27:43,480 - mmcls - INFO - workflow: [('train', 1)], max: 100 epochs
2023-02-05 21:27:43,481 - mmcls - INFO - Checkpoints will be saved to C:\PycharmProjects\mmclassification\tools\work_dirs\shufflenet-v2-flower by HardDiskBackend.
2023-02-05 21:27:59,804 - mmcls - INFO - Epoch(val) [1][18]	accuracy_top-1: 91.7254, accuracy_top-5: 100.0000
2023-02-05 21:28:06,721 - mmcls - INFO - Epoch(val) [2][18]	accuracy_top-1: 92.6056, accuracy_top-5: 100.0000
2023-02-05 21:28:13,664 - mmcls - INFO - Epoch(val) [3][18]	accuracy_top-1: 93.6620, accuracy_top-5: 100.0000
2023-02-05 21:28:20,474 - mmcls - INFO - Epoch(val) [4][18]	accuracy_top-1: 93.3099, accuracy_top-5: 100.0000
2023-02-05 21:28:27,331 - mmcls - INFO - Epoch(val) [5][18]	accuracy_top-1: 93.3099, accuracy_top-5: 100.0000
2023-02-05 21:28:34,248 - mmcls - INFO - Epoch(val) [6][18]	accuracy_top-1: 94.1901, accuracy_top-5: 100.0000
2023-02-05 21:28:41,098 - mmcls - INFO - Epoch(val) [7][18]	accuracy_top-1: 93.6620, accuracy_top-5: 100.0000
2023-02-05 21:28:47,910 - mmcls - INFO - Epoch(val) [8][18]	accuracy_top-1: 93.6620, accuracy_top-5: 100.0000
2023-02-05 21:28:54,627 - mmcls - INFO - Epoch(val) [9][18]	accuracy_top-1: 94.3662, accuracy_top-5: 100.0000
2023-02-05 21:29:01,415 - mmcls - INFO - Epoch(val) [10][18]	accuracy_top-1: 93.6620, accuracy_top-5: 100.0000
2023-02-05 21:29:08,261 - mmcls - INFO - Epoch(val) [11][18]	accuracy_top-1: 93.4859, accuracy_top-5: 100.0000
2023-02-05 21:29:15,052 - mmcls - INFO - Epoch(val) [12][18]	accuracy_top-1: 94.7183, accuracy_top-5: 100.0000
2023-02-05 21:29:21,942 - mmcls - INFO - Epoch(val) [13][18]	accuracy_top-1: 94.0141, accuracy_top-5: 100.0000
2023-02-05 21:29:28,833 - mmcls - INFO - Epoch(val) [14][18]	accuracy_top-1: 94.7183, accuracy_top-5: 100.0000
2023-02-05 21:29:35,735 - mmcls - INFO - Epoch(val) [15][18]	accuracy_top-1: 94.1901, accuracy_top-5: 100.0000
2023-02-05 21:29:41,792 - mmcls - INFO - Epoch(val) [16][18]	accuracy_top-1: 93.4859, accuracy_top-5: 100.0000
2023-02-05 21:29:47,622 - mmcls - INFO - Epoch(val) [17][18]	accuracy_top-1: 94.5423, accuracy_top-5: 100.0000
2023-02-05 21:29:53,365 - mmcls - INFO - Epoch(val) [18][18]	accuracy_top-1: 94.1901, accuracy_top-5: 100.0000
2023-02-05 21:29:59,227 - mmcls - INFO - Epoch(val) [19][18]	accuracy_top-1: 94.3662, accuracy_top-5: 100.0000
2023-02-05 21:30:04,338 - mmcls - INFO - Saving checkpoint at 20 epochs
2023-02-05 21:30:05,270 - mmcls - INFO - Epoch(val) [20][18]	accuracy_top-1: 94.1901, accuracy_top-5: 100.0000
2023-02-05 21:30:11,519 - mmcls - INFO - Epoch(val) [21][18]	accuracy_top-1: 93.8380, accuracy_top-5: 100.0000
2023-02-05 21:30:17,481 - mmcls - INFO - Epoch(val) [22][18]	accuracy_top-1: 94.1901, accuracy_top-5: 100.0000
2023-02-05 21:30:23,353 - mmcls - INFO - Epoch(val) [23][18]	accuracy_top-1: 93.6620, accuracy_top-5: 100.0000
2023-02-05 21:30:29,319 - mmcls - INFO - Epoch(val) [24][18]	accuracy_top-1: 93.3099, accuracy_top-5: 100.0000
2023-02-05 21:30:35,410 - mmcls - INFO - Epoch(val) [25][18]	accuracy_top-1: 93.8380, accuracy_top-5: 100.0000
2023-02-05 21:30:41,338 - mmcls - INFO - Epoch(val) [26][18]	accuracy_top-1: 94.7183, accuracy_top-5: 100.0000
2023-02-05 21:30:47,320 - mmcls - INFO - Epoch(val) [27][18]	accuracy_top-1: 93.8380, accuracy_top-5: 100.0000
2023-02-05 21:30:53,180 - mmcls - INFO - Epoch(val) [28][18]	accuracy_top-1: 94.3662, accuracy_top-5: 100.0000
2023-02-05 21:30:58,936 - mmcls - INFO - Epoch(val) [29][18]	accuracy_top-1: 94.3662, accuracy_top-5: 100.0000
2023-02-05 21:31:04,917 - mmcls - INFO - Epoch(val) [30][18]	accuracy_top-1: 94.7183, accuracy_top-5: 100.0000
2023-02-05 21:31:10,721 - mmcls - INFO - Epoch(val) [31][18]	accuracy_top-1: 94.1901, accuracy_top-5: 100.0000
2023-02-05 21:31:16,766 - mmcls - INFO - Epoch(val) [32][18]	accuracy_top-1: 94.5423, accuracy_top-5: 100.0000
2023-02-05 21:31:22,822 - mmcls - INFO - Epoch(val) [33][18]	accuracy_top-1: 94.7183, accuracy_top-5: 100.0000
2023-02-05 21:31:28,813 - mmcls - INFO - Epoch(val) [34][18]	accuracy_top-1: 94.1901, accuracy_top-5: 100.0000
2023-02-05 21:31:34,879 - mmcls - INFO - Epoch(val) [35][18]	accuracy_top-1: 94.8944, accuracy_top-5: 100.0000
2023-02-05 21:31:40,869 - mmcls - INFO - Epoch(val) [36][18]	accuracy_top-1: 94.3662, accuracy_top-5: 100.0000
2023-02-05 21:31:46,792 - mmcls - INFO - Epoch(val) [37][18]	accuracy_top-1: 94.5423, accuracy_top-5: 100.0000
2023-02-05 21:31:52,800 - mmcls - INFO - Epoch(val) [38][18]	accuracy_top-1: 95.2465, accuracy_top-5: 100.0000
2023-02-05 21:31:58,778 - mmcls - INFO - Epoch(val) [39][18]	accuracy_top-1: 94.7183, accuracy_top-5: 100.0000
2023-02-05 21:32:03,915 - mmcls - INFO - Saving checkpoint at 40 epochs
2023-02-05 21:32:04,747 - mmcls - INFO - Epoch(val) [40][18]	accuracy_top-1: 94.8944, accuracy_top-5: 100.0000
2023-02-05 21:32:10,494 - mmcls - INFO - Epoch(val) [41][18]	accuracy_top-1: 94.8944, accuracy_top-5: 100.0000
2023-02-05 21:32:16,511 - mmcls - INFO - Epoch(val) [42][18]	accuracy_top-1: 94.7183, accuracy_top-5: 100.0000
2023-02-05 21:32:22,435 - mmcls - INFO - Epoch(val) [43][18]	accuracy_top-1: 94.7183, accuracy_top-5: 100.0000
2023-02-05 21:32:28,180 - mmcls - INFO - Epoch(val) [44][18]	accuracy_top-1: 94.7183, accuracy_top-5: 100.0000
2023-02-05 21:32:34,022 - mmcls - INFO - Epoch(val) [45][18]	accuracy_top-1: 95.0704, accuracy_top-5: 100.0000
2023-02-05 21:32:39,872 - mmcls - INFO - Epoch(val) [46][18]	accuracy_top-1: 94.7183, accuracy_top-5: 100.0000
2023-02-05 21:32:46,009 - mmcls - INFO - Epoch(val) [47][18]	accuracy_top-1: 94.0141, accuracy_top-5: 100.0000
2023-02-05 21:32:51,908 - mmcls - INFO - Epoch(val) [48][18]	accuracy_top-1: 94.5423, accuracy_top-5: 100.0000
2023-02-05 21:32:57,727 - mmcls - INFO - Epoch(val) [49][18]	accuracy_top-1: 94.7183, accuracy_top-5: 100.0000
2023-02-05 21:33:03,526 - mmcls - INFO - Epoch(val) [50][18]	accuracy_top-1: 94.8944, accuracy_top-5: 100.0000
2023-02-05 21:33:09,550 - mmcls - INFO - Epoch(val) [51][18]	accuracy_top-1: 95.4225, accuracy_top-5: 100.0000
2023-02-05 21:33:15,366 - mmcls - INFO - Epoch(val) [52][18]	accuracy_top-1: 94.8944, accuracy_top-5: 100.0000
2023-02-05 21:33:21,139 - mmcls - INFO - Epoch(val) [53][18]	accuracy_top-1: 94.7183, accuracy_top-5: 100.0000
2023-02-05 21:33:26,922 - mmcls - INFO - Epoch(val) [54][18]	accuracy_top-1: 95.0704, accuracy_top-5: 100.0000
2023-02-05 21:33:32,944 - mmcls - INFO - Epoch(val) [55][18]	accuracy_top-1: 94.5423, accuracy_top-5: 100.0000
2023-02-05 21:33:38,784 - mmcls - INFO - Epoch(val) [56][18]	accuracy_top-1: 95.0704, accuracy_top-5: 100.0000
2023-02-05 21:33:44,614 - mmcls - INFO - Epoch(val) [57][18]	accuracy_top-1: 94.5423, accuracy_top-5: 100.0000
2023-02-05 21:33:50,390 - mmcls - INFO - Epoch(val) [58][18]	accuracy_top-1: 95.4225, accuracy_top-5: 100.0000
2023-02-05 21:33:56,153 - mmcls - INFO - Epoch(val) [59][18]	accuracy_top-1: 95.2465, accuracy_top-5: 100.0000
2023-02-05 21:34:01,271 - mmcls - INFO - Saving checkpoint at 60 epochs
2023-02-05 21:34:02,098 - mmcls - INFO - Epoch(val) [60][18]	accuracy_top-1: 95.5986, accuracy_top-5: 100.0000
2023-02-05 21:34:07,927 - mmcls - INFO - Epoch(val) [61][18]	accuracy_top-1: 94.7183, accuracy_top-5: 100.0000
2023-02-05 21:34:13,847 - mmcls - INFO - Epoch(val) [62][18]	accuracy_top-1: 94.5423, accuracy_top-5: 100.0000
2023-02-05 21:34:19,771 - mmcls - INFO - Epoch(val) [63][18]	accuracy_top-1: 94.5423, accuracy_top-5: 100.0000
2023-02-05 21:34:25,565 - mmcls - INFO - Epoch(val) [64][18]	accuracy_top-1: 94.5423, accuracy_top-5: 100.0000
2023-02-05 21:34:31,352 - mmcls - INFO - Epoch(val) [65][18]	accuracy_top-1: 95.2465, accuracy_top-5: 100.0000
2023-02-05 21:34:37,129 - mmcls - INFO - Epoch(val) [66][18]	accuracy_top-1: 95.2465, accuracy_top-5: 100.0000
2023-02-05 21:34:42,900 - mmcls - INFO - Epoch(val) [67][18]	accuracy_top-1: 95.2465, accuracy_top-5: 100.0000
2023-02-05 21:34:48,791 - mmcls - INFO - Epoch(val) [68][18]	accuracy_top-1: 94.5423, accuracy_top-5: 100.0000
2023-02-05 21:34:54,812 - mmcls - INFO - Epoch(val) [69][18]	accuracy_top-1: 94.3662, accuracy_top-5: 100.0000
2023-02-05 21:35:02,335 - mmcls - INFO - Epoch(val) [70][18]	accuracy_top-1: 94.7183, accuracy_top-5: 100.0000
2023-02-05 21:35:08,366 - mmcls - INFO - Epoch(val) [71][18]	accuracy_top-1: 94.8944, accuracy_top-5: 100.0000
2023-02-05 21:35:14,263 - mmcls - INFO - Epoch(val) [72][18]	accuracy_top-1: 94.8944, accuracy_top-5: 100.0000
2023-02-05 21:35:20,185 - mmcls - INFO - Epoch(val) [73][18]	accuracy_top-1: 94.8944, accuracy_top-5: 100.0000
2023-02-05 21:35:26,164 - mmcls - INFO - Epoch(val) [74][18]	accuracy_top-1: 94.8944, accuracy_top-5: 100.0000
2023-02-05 21:35:31,988 - mmcls - INFO - Epoch(val) [75][18]	accuracy_top-1: 95.0704, accuracy_top-5: 100.0000
2023-02-05 21:35:37,881 - mmcls - INFO - Epoch(val) [76][18]	accuracy_top-1: 94.5423, accuracy_top-5: 100.0000
2023-02-05 21:35:43,818 - mmcls - INFO - Epoch(val) [77][18]	accuracy_top-1: 95.4225, accuracy_top-5: 100.0000
2023-02-05 21:35:49,593 - mmcls - INFO - Epoch(val) [78][18]	accuracy_top-1: 95.0704, accuracy_top-5: 100.0000
2023-02-05 21:35:55,344 - mmcls - INFO - Epoch(val) [79][18]	accuracy_top-1: 94.5423, accuracy_top-5: 100.0000
2023-02-05 21:36:00,335 - mmcls - INFO - Saving checkpoint at 80 epochs
2023-02-05 21:36:01,144 - mmcls - INFO - Epoch(val) [80][18]	accuracy_top-1: 95.0704, accuracy_top-5: 100.0000
2023-02-05 21:36:06,885 - mmcls - INFO - Epoch(val) [81][18]	accuracy_top-1: 94.5423, accuracy_top-5: 100.0000
2023-02-05 21:36:12,730 - mmcls - INFO - Epoch(val) [82][18]	accuracy_top-1: 94.7183, accuracy_top-5: 100.0000
2023-02-05 21:36:18,766 - mmcls - INFO - Epoch(val) [83][18]	accuracy_top-1: 94.7183, accuracy_top-5: 100.0000
2023-02-05 21:36:24,799 - mmcls - INFO - Epoch(val) [84][18]	accuracy_top-1: 95.2465, accuracy_top-5: 100.0000
2023-02-05 21:36:30,851 - mmcls - INFO - Epoch(val) [85][18]	accuracy_top-1: 95.4225, accuracy_top-5: 100.0000
2023-02-05 21:36:37,002 - mmcls - INFO - Epoch(val) [86][18]	accuracy_top-1: 94.7183, accuracy_top-5: 100.0000
2023-02-05 21:36:43,163 - mmcls - INFO - Epoch(val) [87][18]	accuracy_top-1: 94.7183, accuracy_top-5: 100.0000
2023-02-05 21:36:49,178 - mmcls - INFO - Epoch(val) [88][18]	accuracy_top-1: 94.7183, accuracy_top-5: 100.0000
2023-02-05 21:36:55,332 - mmcls - INFO - Epoch(val) [89][18]	accuracy_top-1: 95.5986, accuracy_top-5: 100.0000
2023-02-05 21:37:01,223 - mmcls - INFO - Epoch(val) [90][18]	accuracy_top-1: 94.8944, accuracy_top-5: 100.0000
2023-02-05 21:37:07,221 - mmcls - INFO - Epoch(val) [91][18]	accuracy_top-1: 95.0704, accuracy_top-5: 100.0000
2023-02-05 21:37:13,092 - mmcls - INFO - Epoch(val) [92][18]	accuracy_top-1: 94.8944, accuracy_top-5: 100.0000
2023-02-05 21:37:19,071 - mmcls - INFO - Epoch(val) [93][18]	accuracy_top-1: 95.0704, accuracy_top-5: 100.0000
2023-02-05 21:37:24,981 - mmcls - INFO - Epoch(val) [94][18]	accuracy_top-1: 95.0704, accuracy_top-5: 100.0000
2023-02-05 21:37:30,976 - mmcls - INFO - Epoch(val) [95][18]	accuracy_top-1: 95.0704, accuracy_top-5: 100.0000
2023-02-05 21:37:37,030 - mmcls - INFO - Epoch(val) [96][18]	accuracy_top-1: 95.2465, accuracy_top-5: 100.0000
2023-02-05 21:37:43,035 - mmcls - INFO - Epoch(val) [97][18]	accuracy_top-1: 94.7183, accuracy_top-5: 100.0000
2023-02-05 21:37:49,169 - mmcls - INFO - Epoch(val) [98][18]	accuracy_top-1: 94.7183, accuracy_top-5: 100.0000
2023-02-05 21:37:55,010 - mmcls - INFO - Epoch(val) [99][18]	accuracy_top-1: 95.2465, accuracy_top-5: 100.0000
2023-02-05 21:38:00,112 - mmcls - INFO - Saving checkpoint at 100 epochs
2023-02-05 21:38:00,921 - mmcls - INFO - Epoch(val) [100][18]	accuracy_top-1: 95.2465, accuracy_top-5: 100.0000
